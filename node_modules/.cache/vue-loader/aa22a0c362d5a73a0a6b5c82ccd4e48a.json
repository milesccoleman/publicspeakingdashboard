{"remainingRequest":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aletheia/Desktop/publicspeakingdashboard/src/components/PublicSpeakingDashboard.vue?vue&type=style&index=0&id=5be102de&prod&scoped=true&lang=css&","dependencies":[{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/src/components/PublicSpeakingDashboard.vue","mtime":1682708293000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/css-loader/dist/cjs.js","mtime":1682705996000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1682706015000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/postcss-loader/src/index.js","mtime":1682706008000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/cache-loader/dist/cjs.js","mtime":1682705990000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/index.js","mtime":1682706015000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmRpdiB7CmJhY2tncm91bmQtY29sb3I6IG5vbmU7IApjb2xvcjogIzcxYzY4YjsgCgp9Ci5jaGFydFdpbmRvdyB7CmhlaWdodDogMjUwcHg7IApwb3NpdGlvbjogcmVsYXRpdmU7Cgp9Ci5vcHRpb25zQnV0dG9uICB7CmhlaWdodDogMTUwcHg7CndpZHRoOiAxNTBweDsgCnBhZGRpbmc6IDEycHg7IApmb250LXNpemU6IDI1cHg7IAptYXJnaW46IDIwcHg7CmJvcmRlcjogbm9uZTsgCmZvbnQtd2VpZ2h0OiBib2xkOyAKY29sb3I6IGJsYWNrOyAKZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwp9CgoudGl0bGUgewpjb2xvcjogd2hpdGU7IAp9CiNvcHRpb25XUE0gewpiYWNrZ3JvdW5kLWNvbG9yOiAjQ0JDM0UzOyAKfQojbWVzc2FnZVR3byB7CmNvbG9yOiAjZjQ4ZDc5Cn0KI21lc3NhZ2VUaHJlZSB7CmNvbG9yOiB3aGl0ZQp9CiNiZWdpbiB7CmJhY2tncm91bmQtY29sb3I6ICM3NzY2YzY7IApib3JkZXI6IG5vbmU7IApoZWlnaHQ6IDUwcHg7IAp3aWR0aDogMTAwcHg7IApmb250LXdlaWdodDogYm9sZDsgCmNvbG9yOiBibGFjazsgCmZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsKZm9udC1zaXplOiAyMHB4OyAKbWFyZ2luLXRvcDogNDBweDsgCm1hcmdpbi1ib3R0b206IC0yMHB4OyAKfQoKI3N0YXJ0IHsKYmFja2dyb3VuZC1jb2xvcjogI0NCQzNFMzsgCmJvcmRlcjogbm9uZTsgCmhlaWdodDogNTBweDsgCndpZHRoOiAxMDBweDsgCmZvbnQtd2VpZ2h0OiBib2xkOyAKY29sb3I6IGJsYWNrOyAKZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwpmb250LXNpemU6IDIwcHg7IAptYXJnaW46IDEwcHg7IAp9Cgojc3RvcCB7CmJhY2tncm91bmQtY29sb3I6ICNDQkMzRTM7IApib3JkZXI6IG5vbmU7IApoZWlnaHQ6IDUwcHg7IAp3aWR0aDogMTAwcHg7IApmb250LXdlaWdodDogYm9sZDsgCmNvbG9yOiBibGFjazsgCmZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjsKZm9udC1zaXplOiAyMHB4OyAKbWFyZ2luOiAxMHB4OyAKfQoKI3Jlc2V0IHsKYmFja2dyb3VuZC1jb2xvcjogI0NCQzNFMzsgCmJvcmRlcjogbm9uZTsgCmhlaWdodDogMjVweDsgCndpZHRoOiA1MHB4OyAKZm9udC13ZWlnaHQ6IGJvbGQ7IApjb2xvcjogYmxhY2s7IApmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7CmZvbnQtc2l6ZTogMTJweDsgCm1hcmdpbjogMTBweDsgCn0KCiNuZXh0IHsKYmFja2dyb3VuZC1jb2xvcjogI0NCQzNFMzsgCmJvcmRlcjogbm9uZTsgCmhlaWdodDogNTBweDsgCndpZHRoOiAxMDBweDsgCmZvbnQtd2VpZ2h0OiBib2xkOyAKY29sb3I6IGJsYWNrOyAKZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmOwpmb250LXNpemU6IDIwcHg7IAptYXJnaW4tdG9wOiA0MHB4OyAKbWFyZ2luLWJvdHRvbTogLTIwcHg7IAp9Cgojb3V0cHV0IHsKY29sb3I6IGJsYWNrOyAKYmFja2dyb3VuZC1jb2xvcjogd2hpdGUgCn0KCiNiZWdpbjpob3ZlciB7CmJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsgCn0KCmgzIHsKICBtYXJnaW46IDQwcHggMCAwOwp9CnVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgcGFkZGluZzogMDsKfQpsaSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIG1hcmdpbjogMCAxMHB4Owp9CmEgewogIGNvbG9yOiAjNDJiOTgzOwp9CiN0YWxraW5nIHsKaGVpZ2h0OiAxMDBweDsgCm1hcmdpbi1ib3R0b206IC0yMHB4OyAKLXdlYmtpdC1maWx0ZXI6IGludmVydCgxKTsKICAgZmlsdGVyOiBpbnZlcnQoMSk7Cn0K"},{"version":3,"sources":["PublicSpeakingDashboard.vue"],"names":[],"mappings":";AA6UA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PublicSpeakingDashboard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1 id=\"mainTitle\"> <img id=\"talking\" alt=\"image of voice waves leaving someone's mouth. Attribution: Speak Icon, by Voysla, 'https://www.flaticon.com/free-icons/speak'\" src=\"talking.png\"> {{ msg }} </h1>\n\t\t<p id=\"messageTwo\">\n\t\t\t{{ msg2 }} \n\t\t</p>\n\t\t<p id=\"messageThree\"> \n\t\t\t{{ msg3 }} \n\t\t</p>\n\t\t<p v-if=\"!showWPM\" class=\"title\" id=\"timer\">\n\t\t{{ time }} <br>\n\t\t<b>Time</b>\n\t\t</p>\n\t\t<!--EMOTION FEEDBACK SECTION-->\n\t\t\n\t\t<!--TODO: explore gridding in vue-->\n\t\t<span id=\"voiceAndFace\">\n\t\t<p  v-if=\"!showVoiceEmotion\" class=\"title\" id=\"voiceEmotion\">\n\t\t\t<img class=\"chartWindow\" id=\"voiceEmotion\" src=\"faceEmotions.png\"><br>\n\t\t<b>Voice Analysis Placeholder</b>\n\t\t<!--add waveform-->\n\t\t</p>\n\t\t<p  v-if=\"!showFaceEmotion\" class=\"title\" id=\"voiceEmotion\">\n\t\t\t<img class=\"chartWindow\" id=\"faceEmotion\" src=\"faceEmotions.png\"><br>\n\t\t<b>Face Analysis Placeholder</b>\n\t\t<!--add video feedback-->\n\t\t</p>\n\n\t\t<p  v-if=\"!showTextEmotion\" class=\"title\" id=\"emotion\">\n\t\t<img class=\"chartWindow\" id=\"textEmotion\" src=\"textEmotions.png\"><br>\n\t\tAnger: {{ this.anger }} <br>\n\t\tFear: {{ this.fear}} <br>\n\t\tExcitement: {{ this.excitement }} <br>\n\t\tBoredom: {{ this.boredom}} <br>\n\t\tSadness: {{ this.sadness}} <br>\n\t\tHappiness: {{ this.happiness }}<br>\n\t\t<b>Text Emotion (out of 100)</b>\n    </p>\t\t\n    </span>\n<!-- \n    <p v-if=\"!showWPM\" class=\"title\" id=\"totalWords\"> \n\t\t{{ totalWords }} <br>\n\t\t<b>Total Words Detected</b>\n    </p>\n -->\n \n \n <!--Words Per Minute, Filler Words, and Volume SECTION-->\n \n \n    <p class=\"title\" v-if=\"!showWPM\" id=\"wpm\">\n     <img class=\"chartWindow\" id=\"WPM\" src=\"WPM.png\"><br>\n\t\t{{ wpm }} <br>\n\t\t<b>Overall Average Words Per Minute</b>\n    </p>\n\n\t<!--TODO: Filler Words-->\n\t<!--TODO: Dynamics - attack - decay - volume-->\n\n\n    <span><button id=\"begin\" v-if=\"show3\" v-on:click=\"begin\">Begin</button><button id=\"start\"  v-if=\"!show4\" v-on:click=\"initiateVoiceControl\">Start</button><button id=\"stop\" v-if=\"!show2\" v-on:click=\"stopVoiceControl\">Stop</button><br><button id=\"reset\"  v-if=\"!show2\" v-on:click=\"reset\">Reset</button></span><br>\n    <span><button  v-bind:style=\"{ backgroundColor: WPMColor}\" v-if=\"!show\" v-on:click=\"selectWPM\" class=\"optionsButton\" id=\"optionWPM\">Track Words Per Minute</button><button v-bind:style=\"{ backgroundColor: textEmotionColor}\" v-if=\"!show\" v-on:click=\"selectTextEmotion\" class=\"optionsButton\" id=\"optionTrackEmotionsText\">Track Emotions in Text</button></span><br>\n\t<span><button v-bind:style=\"{ backgroundColor: voiceEmotionColor}\" v-if=\"!show\" v-on:click=\"selectVoiceEmotion\" class=\"optionsButton\" id=\"optionTrackEmotionVoice\">Track Emotions in Voice</button><button v-bind:style=\"{ backgroundColor: faceEmotionColor}\" v-if=\"!show\" v-on:click=\"selectFaceEmotion\" class=\"optionsButton\" id=\"optionTrackEmotionsFace\">Track Emotions in Face</button></span>\n\t<br><button id=\"next\" v-if=\"!show\" v-on:click=\"next\">Next</button>\n    <p v-if=\"!show2\" id=\"output\">\n      {{ output }}\n    </p>\n\n  </div>\n</template>\n\n<script>\nimport paralleldots from 'paralleldots'\nexport default {\n  name: 'publicSpeakingDashboard',\n  props: {\n  }, \n  data () {\n\t\treturn {\n\t\t\tmsg: 'Public Speaking Dashboard',\n\t\t\tmsg2: \"An AI-powered tool to help you reflect on your own public speaking and hone your public speaking skills.\",\n\t\t\tmsg3: \"\",\n\t\t\twordsSpoken: '', \n\t\t\toutput: 'Recognized Text',\n\t\t\tgrabTimeInterval: '', \n\t\t\tregisterWPMInterval: '',\n\t\t\tgetEmotionStatsInterval: '',  \n\t\t\tinitialTime: 0,  \n\t\t\ttime: 0,\n\t\t\ttimeElapsed: 0, \n\t\t\ttimeDifference: 0, \n\t\t\twordCount: 0,\n\t\t\ttotalWords: 0, \n\t\t\twordCountDividedByTime: 0,\n\t\t\tstop: false, \n\t\t\twpm: 0,\n\t\t\tanger: '', \n\t\t\tfear: '', \n\t\t\texcitement: '', \n\t\t\tboredom: '', \n\t\t\tsadness: '', \n\t\t\thappiness: '', \n\t\t\tcontinuous: true, \n\t\t\tshow: true, \n\t\t\tshow2: true, \n\t\t\tshow3: true, \n\t\t\tshow4: true,\n\t\t\tshowWPM: true,  \n\t\t\tWPMSelected: false,\n\t\t\tWPMColor: '#CBC3E3',  \n\t\t\tshowTextEmotion: true, \n\t\t\ttextEmotionSelected: false, \n\t\t\ttextEmotionColor: '#CBC3E3', \n\t\t\tshowVoiceEmotion: true, \n\t\t\tvoiceEmotionSelected: false, \n\t\t\tvoiceEmotionColor: '#CBC3E3', \n\t\t\tshowFaceEmotion: true, \n\t\t\tfaceEmotionSelected: false, \n\t\t\tfaceEmotionColor: '#CBC3E3'\n\t\t}\n\t},\n\t\n\tcreated: function () {\n\t//initiate speech recognition and ask for microphone permission\n\t\twindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\t\tlet recognition = new window.SpeechRecognition();\n\t\trecognition.start()\n\t}, \n\n\tmethods: {\n\t\n\t\tbegin: function () {\n\t\t\tthis.show = false\n\t\t\tthis.show3 = false\n\t\t\tthis.msg2 = ''\n\t\t\tthis.msg3 = 'Select the data you would like to track.'\n\t\t},\n\t\t\n\t\tnext: function () {\n\t\t\tthis.show2 = false\n\t\t\tthis.show4 = false\n\t\t\tthis.show = true\n\t\t\tthis.msg3 = ''\n\t\t\t\n\t\t\tif (this.WPMSelected == true)\t {\n\t\t\t\tthis.showWPM = false\n\t\t\t}\t\n\t\t\t\n\t\t\tif (this.textEmotionSelected == true)\t {\n\t\t\t\tthis.showTextEmotion = false\n\t\t\t}\t\n\t\t\t\n\t\t\tif (this.voiceEmotionSelected == true)\t {\n\t\t\t\tthis.showVoiceEmotion = false\n\t\t\t}\t\n\t\t\t\n\t\t\tif (this.faceEmotionSelected == true)\t {\n\t\t\t\tthis.showFaceEmotion = false\n\t\t\t}\n\t\t\t\n\t\t\tif (this.textEmotionSelected == false && this.WPMSelected == false)\t {\n\t\t\t\tthis.msg2 = 'No input data selected. Please click \"reset\"and start over.'\n\t\t\t}\t\n\t\t},\n\t\t\n\t\tselectWPM: function () {\n\t\t\n\t\t\tif (this.WPMSelected == false) {\n\t\t\t\tthis.WPMSelected = true\n\t\t\t\tthis.WPMColor = 'lightgreen'\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tthis.WPMSelected = false\n\t\t\t\tthis.WPMColor = '#CBC3E3'\n\t\t\t}\n\t\t},\n\t\t\n\t\tselectTextEmotion: function () {\n\t\t\n\t\t\tif (this.textEmotionSelected == false) {\n\t\t\t\tthis.textEmotionSelected = true\n\t\t\t\tthis.textEmotionColor = 'lightgreen'\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tthis.textEmotionSelected = false\n\t\t\t\tthis.textEmotionColor = '#CBC3E3'\n\t\t\t}\n\t\t},\n\t\t\n\t\tselectVoiceEmotion: function () {\n\t\t\n\t\t\tif (this.voiceEmotionSelected == false) {\n\t\t\t\tthis.voiceEmotionSelected = true\n\t\t\t\tthis.voiceEmotionColor = 'lightgreen'\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tthis.voiceEmotionSelected = false\n\t\t\t\tthis.voiceEmotionColor = '#CBC3E3'\n\t\t\t}\n\t\t},\n\t\t\n\t\tselectFaceEmotion: function () {\n\t\t\n\t\t\tif (this.faceEmotionSelected == false) {\n\t\t\t\tthis.faceEmotionSelected = true\n\t\t\t\tthis.faceEmotionColor = 'lightgreen'\n\t\t\t}\n\t\t\t\n\t\t\telse {\n\t\t\t\tthis.faceEmotionSelected = false\n\t\t\t\tthis.faceEmotionColor = '#CBC3E3'\n\t\t\t}\n\t\t},\n\t\n\t\tinitiateVoiceControl: function () {\n\t\t//start listening for words and making a transcript of detected words\n\t\t\tconsole.log('voice recognition initiated')\n\t\t\twindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\t\t\tlet finalTranscript = '';\n\t\t\tlet recognition = new window.SpeechRecognition();\n\t\t\trecognition.interimResults = true; \n\t\t\trecognition.maxAlternatives = 10;\n\t\t\trecognition.continuous = this.continuous;\n\t\t\trecognition.onresult = (event) => {\n\t\t\t\tlet interimTranscript = '';\n\t\t\t\tfor (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n\t\t\t\t\tlet transcript = event.results[i][0].transcript;\n\t\t\t\t\tif (event.results[i].isFinal) {\n\t\t\t\t\t\tfinalTranscript += transcript;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinterimTranscript += transcript;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.wordsSpoken = finalTranscript\n\t\t\t\tthis.output =  this.wordsSpoken += interimTranscript\n\t\t\t\tthis.wordCount = this.countWords(this.output)\n\t\t\t\tthis.totalWords = this.wordCount\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t}\n\t\t\trecognition.start()\n\t\t\t\t\tif (this.stop == false) {\n\t\t\t\t\t\tconsole.log(\"app started\")\n\t\t\t\t\t\tthis.initialTime = Date.now();\n\t\t\t\t\t\tthis.grabTimeInterval = window.setInterval(this.grabTime, 1000)\n\t\t\t\t\t\tthis.registerWPMInterval = window.setInterval(this.registerWPM, 1000)\n\t\t\t\t\t\tthis.getEmotionStatsInterval = window.setInterval(this.getEmotionStats, 5000)\n\t\t\t\t\t} \n\t\t\t\t\tif (this.stop == true) {\n\t\t\t\t\t\trecognition.stop()\n\t\t\t\t\t\tthis.stop = false\n\t\t\t\t\t\tthis.continuous = true\n\t\t\t\t\t\tconsole.log(\"app stopped\")\n\t\n\t\t\t\t\t}\n\t\t},\n\t\n\t\tgrabTime: function () {\n\t\t//keep track of time in both milliseconds as well as minutes and seconds\n\t\t\tthis.timeDifference = Date.now() - this.initialTime;\n\t\t\tvar formatted = convertTime(this.timeDifference);\n\t\t\tdocument.getElementById('timer').innerHTML = '' + formatted;\n\t\t\tconsole.log(formatted)\n\t\t\tthis.timeElapsed = this.timeDifference\n\t\t\treturn this.timeElapsed\n\t\t\tfunction convertTime(miliseconds) {\n\t\t\t\tvar totalSeconds = Math.floor(miliseconds/1000);\n\t\t\t\tvar minutes = Math.floor(totalSeconds/60);\n\t\t\t\tvar seconds = totalSeconds - minutes * 60;\n\t\t\t\treturn minutes + ':' + seconds;\n\t\t\t}\n\t\t},\n\t\t\n\t\tcountWords: function (str){\n\t\t//count how many words are in the transcript of detected words\n\t\t\tconst arr = str.split(' ');\n\t\t\treturn arr.filter(word => word !== '').length;\n\t\t}, \n\t\t\n\t\tregisterWPM: function () {\n\t\t//calculate number of words per minute--at one second intervals\n\t\t\tthis.wpm = Math.round(this.wordCount/(this.timeElapsed/1000) * 60) \n\t\t},\n\t\t\n\t\tgetEmotionStats: function () {\n\t\t//send transcript data to be evaluated as per emotional content\n\t\t\tconst pd = require('paralleldots' || paralleldots)\n\t\t\tpd.apiKey = \"hL7rOIhghKLZtrI6w04cFjxVvAOHQ7BiNhjMLAVnMPw\";\n\t\t\tpd.emotion(this.wordsSpoken,\"en\")\n\t\t\t.then((response) => {\n\t\t\t\tlet obj = JSON.parse(response)\n\t\t\t\tthis.anger = Math.round(obj.emotion.Angry * 100) \n\t\t\t\tthis.fear = Math.round(obj.emotion.Fear * 100) \n\t\t\t\tthis.excitement = Math.round(obj.emotion.Excited * 100)\n\t\t\t\tthis.boredom = Math.round(obj.emotion.Bored * 100)\n\t\t\t\tthis.sadness = Math.round(obj.emotion.Sad * 100)\n\t\t\t\tthis.happiness = Math.round(obj.emotion.Happy * 100)\n\t\t\t\tconsole.log(\"emotion data retrieved\" + response)\n\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t\t\n\t\t},  \n\t\t\n\t\tstopVoiceControl: function () {\n\t\t//reset speech recognition so it can stop and clear original timers\n\t\t\tthis.continuous = false\n\t\t\tthis.stop = true\n\t\t\tthis.initiateVoiceControl()\n\t\t\tclearInterval(this.grabTimeInterval)\n\t\t\tclearInterval(this.registerWPMInterval)\n\t\t\tclearInterval(this.getEmotionStatsInterval)\n\t\t}, \n\t\n\t\treset: function () {\n\t\t\tlocation.reload()\n\t\t}\n\t\n\t\n\t\n\t\n\t}//\n}//\t\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\ndiv {\nbackground-color: none; \ncolor: #71c68b; \n\n}\n.chartWindow {\nheight: 250px; \nposition: relative;\n\n}\n.optionsButton  {\nheight: 150px;\nwidth: 150px; \npadding: 12px; \nfont-size: 25px; \nmargin: 20px;\nborder: none; \nfont-weight: bold; \ncolor: black; \nfont-family: Arial, sans-serif;\n}\n\n.title {\ncolor: white; \n}\n#optionWPM {\nbackground-color: #CBC3E3; \n}\n#messageTwo {\ncolor: #f48d79\n}\n#messageThree {\ncolor: white\n}\n#begin {\nbackground-color: #7766c6; \nborder: none; \nheight: 50px; \nwidth: 100px; \nfont-weight: bold; \ncolor: black; \nfont-family: Arial, sans-serif;\nfont-size: 20px; \nmargin-top: 40px; \nmargin-bottom: -20px; \n}\n\n#start {\nbackground-color: #CBC3E3; \nborder: none; \nheight: 50px; \nwidth: 100px; \nfont-weight: bold; \ncolor: black; \nfont-family: Arial, sans-serif;\nfont-size: 20px; \nmargin: 10px; \n}\n\n#stop {\nbackground-color: #CBC3E3; \nborder: none; \nheight: 50px; \nwidth: 100px; \nfont-weight: bold; \ncolor: black; \nfont-family: Arial, sans-serif;\nfont-size: 20px; \nmargin: 10px; \n}\n\n#reset {\nbackground-color: #CBC3E3; \nborder: none; \nheight: 25px; \nwidth: 50px; \nfont-weight: bold; \ncolor: black; \nfont-family: Arial, sans-serif;\nfont-size: 12px; \nmargin: 10px; \n}\n\n#next {\nbackground-color: #CBC3E3; \nborder: none; \nheight: 50px; \nwidth: 100px; \nfont-weight: bold; \ncolor: black; \nfont-family: Arial, sans-serif;\nfont-size: 20px; \nmargin-top: 40px; \nmargin-bottom: -20px; \n}\n\n#output {\ncolor: black; \nbackground-color: white \n}\n\n#begin:hover {\nbackground-color: lightgray; \n}\n\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n#talking {\nheight: 100px; \nmargin-bottom: -20px; \n-webkit-filter: invert(1);\n   filter: invert(1);\n}\n</style>\n"]}]}