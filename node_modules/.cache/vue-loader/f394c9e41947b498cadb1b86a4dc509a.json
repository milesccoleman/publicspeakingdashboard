{"remainingRequest":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aletheia/Desktop/publicspeakingdashboard/src/components/PublicSpeakingDashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/src/components/PublicSpeakingDashboard.vue","mtime":1679430691000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/cache-loader/dist/cjs.js","mtime":1679427675000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/thread-loader/dist/cjs.js","mtime":1679427691000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/babel-loader/lib/index.js","mtime":1679427675000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/cache-loader/dist/cjs.js","mtime":1679427675000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/index.js","mtime":1679427692000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBwYXJhbGxlbGRvdHMgZnJvbSAncGFyYWxsZWxkb3RzJwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ3B1YmxpY1NwZWFraW5nRGFzaGJvYXJkJywKICBwcm9wczogewogIH0sIAogIGRhdGEgKCkgewoJCXJldHVybiB7CgkJCW1zZzogJ1B1YmxpYyBTcGVha2luZyBEYXNoYm9hcmQnLCAKCQkJd29yZHNTcG9rZW46ICcnLCAKCQkJb3V0cHV0OiAnUmVjb2duaXplZCBUZXh0JywKCQkJZ3JhYlRpbWVJbnRlcnZhbDogJycsIAoJCQlyZWdpc3RlcldQTUludGVydmFsOiAnJywKCQkJZ2V0RW1vdGlvblN0YXRzSW50ZXJ2YWw6ICcnLCAgCgkJCWluaXRpYWxUaW1lOiAwLCAgCgkJCXRpbWU6IDAsCgkJCXRpbWVFbGFwc2VkOiAwLCAKCQkJdGltZURpZmZlcmVuY2U6IDAsIAoJCQl3b3JkQ291bnQ6IDAsCgkJCXRvdGFsV29yZHM6IDAsIAoJCQl3b3JkQ291bnREaXZpZGVkQnlUaW1lOiAwLAoJCQlzdG9wOiBmYWxzZSwgCgkJCXdwbTogMCwKCQkJYW5nZXI6ICcnLCAKCQkJZmVhcjogJycsIAoJCQlleGNpdGVtZW50OiAnJywgCgkJCWJvcmVkb206ICcnLCAKCQkJc2FkbmVzczogJycsIAoJCQloYXBwaW5lc3M6ICcnLCAKCQkJY29udGludW91czogdHJ1ZQoJCX0KCX0sCgkKCWNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHsKCS8vaW5pdGlhdGUgc3BlZWNoIHJlY29nbml0aW9uIGFuZCBhc2sgZm9yIG1pY3JvcGhvbmUgcGVybWlzc2lvbgoJCXdpbmRvdy5TcGVlY2hSZWNvZ25pdGlvbiA9IHdpbmRvdy53ZWJraXRTcGVlY2hSZWNvZ25pdGlvbiB8fCB3aW5kb3cuU3BlZWNoUmVjb2duaXRpb247CgkJbGV0IHJlY29nbml0aW9uID0gbmV3IHdpbmRvdy5TcGVlY2hSZWNvZ25pdGlvbigpOwoJCXJlY29nbml0aW9uLnN0YXJ0KCkKCX0sIAoKCW1ldGhvZHM6IHsKCQoJCWluaXRpYXRlVm9pY2VDb250cm9sOiBmdW5jdGlvbiAoKSB7CgkJLy9zdGFydCBsaXN0ZW5pbmcgZm9yIHdvcmRzIGFuZCBtYWtpbmcgYSB0cmFuc2NyaXB0IG9mIGRldGVjdGVkIHdvcmRzCgkJCWNvbnNvbGUubG9nKCd2b2ljZSByZWNvZ25pdGlvbiBpbml0aWF0ZWQnKQoJCQl3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gPSB3aW5kb3cud2Via2l0U3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93LlNwZWVjaFJlY29nbml0aW9uOwoJCQlsZXQgZmluYWxUcmFuc2NyaXB0ID0gJyc7CgkJCWxldCByZWNvZ25pdGlvbiA9IG5ldyB3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24oKTsKCQkJcmVjb2duaXRpb24uaW50ZXJpbVJlc3VsdHMgPSB0cnVlOyAKCQkJcmVjb2duaXRpb24ubWF4QWx0ZXJuYXRpdmVzID0gMTA7CgkJCXJlY29nbml0aW9uLmNvbnRpbnVvdXMgPSB0aGlzLmNvbnRpbnVvdXM7CgkJCXJlY29nbml0aW9uLm9ucmVzdWx0ID0gKGV2ZW50KSA9PiB7CgkJCQlsZXQgaW50ZXJpbVRyYW5zY3JpcHQgPSAnJzsKCQkJCWZvciAobGV0IGkgPSBldmVudC5yZXN1bHRJbmRleCwgbGVuID0gZXZlbnQucmVzdWx0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykgewoJCQkJCWxldCB0cmFuc2NyaXB0ID0gZXZlbnQucmVzdWx0c1tpXVswXS50cmFuc2NyaXB0OwoJCQkJCWlmIChldmVudC5yZXN1bHRzW2ldLmlzRmluYWwpIHsKCQkJCQkJZmluYWxUcmFuc2NyaXB0ICs9IHRyYW5zY3JpcHQ7CgkJCQkJfSBlbHNlIHsKCQkJCQkJaW50ZXJpbVRyYW5zY3JpcHQgKz0gdHJhbnNjcmlwdDsKCQkJCQl9CgkJCQl9CgkJCQl0aGlzLndvcmRzU3Bva2VuID0gZmluYWxUcmFuc2NyaXB0CgkJCQl0aGlzLm91dHB1dCA9ICB0aGlzLndvcmRzU3Bva2VuICs9IGludGVyaW1UcmFuc2NyaXB0CgkJCQl0aGlzLndvcmRDb3VudCA9IHRoaXMuY291bnRXb3Jkcyh0aGlzLm91dHB1dCkKCQkJCXRoaXMudG90YWxXb3JkcyA9IHRoaXMud29yZENvdW50CgkJCX0KCQkJcmVjb2duaXRpb24uc3RhcnQoKQoJCQkJCWlmICh0aGlzLnN0b3AgPT0gZmFsc2UpIHsKCQkJCQkJY29uc29sZS5sb2coImFwcCBzdGFydGVkIikKCQkJCQkJdGhpcy5pbml0aWFsVGltZSA9IERhdGUubm93KCk7CgkJCQkJCXRoaXMuZ3JhYlRpbWVJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLmdyYWJUaW1lLCAxMDAwKQoJCQkJCQl0aGlzLnJlZ2lzdGVyV1BNSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGhpcy5yZWdpc3RlcldQTSwgMTAwMCkKCQkJCQkJdGhpcy5nZXRFbW90aW9uU3RhdHNJbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLmdldEVtb3Rpb25TdGF0cywgNTAwMCkKCQkJCQl9IAoJCQkJCWlmICh0aGlzLnN0b3AgPT0gdHJ1ZSkgewoJCQkJCQlyZWNvZ25pdGlvbi5zdG9wKCkKCQkJCQkJdGhpcy5zdG9wID0gZmFsc2UKCQkJCQkJdGhpcy5jb250aW51b3VzID0gdHJ1ZQoJCQkJCQljb25zb2xlLmxvZygiYXBwIHN0b3BwZWQiKQoJCgkJCQkJfQoJCX0sCgkKCQlncmFiVGltZTogZnVuY3Rpb24gKCkgewoJCS8va2VlcCB0cmFjayBvZiB0aW1lIGluIGJvdGggbWlsbGlzZWNvbmRzIGFzIHdlbGwgYXMgbWludXRlcyBhbmQgc2Vjb25kcwoJCQl0aGlzLnRpbWVEaWZmZXJlbmNlID0gRGF0ZS5ub3coKSAtIHRoaXMuaW5pdGlhbFRpbWU7CgkJCXZhciBmb3JtYXR0ZWQgPSBjb252ZXJ0VGltZSh0aGlzLnRpbWVEaWZmZXJlbmNlKTsKCQkJZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3RpbWVyJykuaW5uZXJIVE1MID0gJycgKyBmb3JtYXR0ZWQ7CgkJCWNvbnNvbGUubG9nKGZvcm1hdHRlZCkKCQkJdGhpcy50aW1lRWxhcHNlZCA9IHRoaXMudGltZURpZmZlcmVuY2UKCQkJcmV0dXJuIHRoaXMudGltZUVsYXBzZWQKCQkJZnVuY3Rpb24gY29udmVydFRpbWUobWlsaXNlY29uZHMpIHsKCQkJCXZhciB0b3RhbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGlzZWNvbmRzLzEwMDApOwoJCQkJdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcy82MCk7CgkJCQl2YXIgc2Vjb25kcyA9IHRvdGFsU2Vjb25kcyAtIG1pbnV0ZXMgKiA2MDsKCQkJCXJldHVybiBtaW51dGVzICsgJzonICsgc2Vjb25kczsKCQkJfQoJCX0sCgkJCgkJY291bnRXb3JkczogZnVuY3Rpb24gKHN0cil7CgkJLy9jb3VudCBob3cgbWFueSB3b3JkcyBhcmUgaW4gdGhlIHRyYW5zY3JpcHQgb2YgZGV0ZWN0ZWQgd29yZHMKCQkJY29uc3QgYXJyID0gc3RyLnNwbGl0KCcgJyk7CgkJCXJldHVybiBhcnIuZmlsdGVyKHdvcmQgPT4gd29yZCAhPT0gJycpLmxlbmd0aDsKCQl9LCAKCQkKCQlyZWdpc3RlcldQTTogZnVuY3Rpb24gKCkgewoJCS8vY2FsY3VsYXRlIG51bWJlciBvZiB3b3JkcyBwZXIgbWludXRlLS1hdCBvbmUgc2Vjb25kIGludGVydmFscwoJCQl0aGlzLndwbSA9IE1hdGgucm91bmQodGhpcy53b3JkQ291bnQvKHRoaXMudGltZUVsYXBzZWQvMTAwMCkgKiA2MCkgCgkJfSwKCQkKCQlnZXRFbW90aW9uU3RhdHM6IGZ1bmN0aW9uICgpIHsKCQkvL3NlbmQgdHJhbnNjcmlwdCBkYXRhIHRvIGJlIGV2YWx1YXRlZCBhcyBwZXIgZW1vdGlvbmFsIGNvbnRlbnQKCQkJcGFyYWxsZWxkb3RzLmFwaUtleSA9ICJoTDdyT0loZ2hLTFp0ckk2dzA0Y0ZqeFZ2QU9IUTdCaU5oak1MQVZuTVB3IjsKCQkJcGFyYWxsZWxkb3RzLmVtb3Rpb24odGhpcy53b3Jkc1Nwb2tlbiwiZW4iKQoJCQkudGhlbigocmVzcG9uc2UpID0+IHsKCQkJCWxldCBvYmogPSBKU09OLnBhcnNlKHJlc3BvbnNlKQoJCQkJdGhpcy5hbmdlciA9IE1hdGgucm91bmQob2JqLmVtb3Rpb24uQW5ncnkgKiAxMDApIAoJCQkJdGhpcy5mZWFyID0gTWF0aC5yb3VuZChvYmouZW1vdGlvbi5GZWFyICogMTAwKSAKCQkJCXRoaXMuZXhjaXRlbWVudCA9IE1hdGgucm91bmQob2JqLmVtb3Rpb24uRXhjaXRlZCAqIDEwMCkKCQkJCXRoaXMuYm9yZWRvbSA9IE1hdGgucm91bmQob2JqLmVtb3Rpb24uQm9yZWQgKiAxMDApCgkJCQl0aGlzLnNhZG5lc3MgPSBNYXRoLnJvdW5kKG9iai5lbW90aW9uLlNhZCAqIDEwMCkKCQkJCXRoaXMuaGFwcGluZXNzID0gTWF0aC5yb3VuZChvYmouZW1vdGlvbi5IYXBweSAqIDEwMCkKCQkJCWNvbnNvbGUubG9nKCJlbW90aW9uIGRhdGEgcmV0cmlldmVkIiArIHJlc3BvbnNlKQoJCQl9KQoJCQkJLmNhdGNoKChlcnJvcikgPT4gewoJCQkJY29uc29sZS5sb2coZXJyb3IpOwoJCQl9KQoJCQoJCX0sICAKCQkKCQlzdG9wVm9pY2VDb250cm9sOiBmdW5jdGlvbiAoKSB7CgkJLy9yZXNldCBzcGVlY2ggcmVjb2duaXRpb24gc28gaXQgY2FuIHN0b3AgYW5kIGNsZWFyIG9yaWdpbmFsIHRpbWVycwoJCQl0aGlzLmNvbnRpbnVvdXMgPSBmYWxzZQoJCQl0aGlzLnN0b3AgPSB0cnVlCgkJCXRoaXMuaW5pdGlhdGVWb2ljZUNvbnRyb2woKQoJCQljbGVhckludGVydmFsKHRoaXMuZ3JhYlRpbWVJbnRlcnZhbCkKCQkJY2xlYXJJbnRlcnZhbCh0aGlzLnJlZ2lzdGVyV1BNSW50ZXJ2YWwpCgkJCWNsZWFySW50ZXJ2YWwodGhpcy5nZXRFbW90aW9uU3RhdHNJbnRlcnZhbCkKCQl9LCAKCQoJCXJlc2V0OiBmdW5jdGlvbiAoKSB7CgkJCWxvY2F0aW9uLnJlbG9hZCgpCgkJfQoJCgkKCQoJCgl9Ly8KfS8vCQo="},{"version":3,"sources":["PublicSpeakingDashboard.vue"],"names":[],"mappings":";AAkfile":"PublicSpeakingDashboard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>{{ msg }}</h1>\n    <p id=\"timer\">\n\t\t{{ time }} <br>\n\t\t<b>Time</b>\n    </p>\n    <p id=\"totalWords\">\n\t\t{{ totalWords }} <br>\n\t\t<b>Total Words Detected</b>\n    </p>\n     <p id=\"wpm\">\n\t\t{{ wpm }} <br>\n\t\t<b>Overall Average Words Per Minute</b>\n    </p>\n        <p id=\"emotion\">\n\t\tAnger: {{ this.anger }} <br>\n\t\tFear: {{ this.fear}} <br>\n\t\tExcitement: {{ this.excitement }} <br>\n\t\tBoredom: {{ this.boredom}} <br>\n\t\tSadness: {{ this.sadness}} <br>\n\t\tHappiness: {{ this.happiness }}<br>\n\t\t<b>Emotion (out of 100)</b>\n    </p>\n    <span><button v-on:click=\"initiateVoiceControl\">Start</button><button v-on:click=\"stopVoiceControl\">Stop</button><button v-on:click=\"reset\">Reset</button></span>\n    \n    <p id=\"output\">\n      {{ output }}\n    </p>\n\n  </div>\n</template>\n\n<script>\nimport paralleldots from 'paralleldots'\nexport default {\n  name: 'publicSpeakingDashboard',\n  props: {\n  }, \n  data () {\n\t\treturn {\n\t\t\tmsg: 'Public Speaking Dashboard', \n\t\t\twordsSpoken: '', \n\t\t\toutput: 'Recognized Text',\n\t\t\tgrabTimeInterval: '', \n\t\t\tregisterWPMInterval: '',\n\t\t\tgetEmotionStatsInterval: '',  \n\t\t\tinitialTime: 0,  \n\t\t\ttime: 0,\n\t\t\ttimeElapsed: 0, \n\t\t\ttimeDifference: 0, \n\t\t\twordCount: 0,\n\t\t\ttotalWords: 0, \n\t\t\twordCountDividedByTime: 0,\n\t\t\tstop: false, \n\t\t\twpm: 0,\n\t\t\tanger: '', \n\t\t\tfear: '', \n\t\t\texcitement: '', \n\t\t\tboredom: '', \n\t\t\tsadness: '', \n\t\t\thappiness: '', \n\t\t\tcontinuous: true\n\t\t}\n\t},\n\t\n\tcreated: function () {\n\t//initiate speech recognition and ask for microphone permission\n\t\twindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\t\tlet recognition = new window.SpeechRecognition();\n\t\trecognition.start()\n\t}, \n\n\tmethods: {\n\t\n\t\tinitiateVoiceControl: function () {\n\t\t//start listening for words and making a transcript of detected words\n\t\t\tconsole.log('voice recognition initiated')\n\t\t\twindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\t\t\tlet finalTranscript = '';\n\t\t\tlet recognition = new window.SpeechRecognition();\n\t\t\trecognition.interimResults = true; \n\t\t\trecognition.maxAlternatives = 10;\n\t\t\trecognition.continuous = this.continuous;\n\t\t\trecognition.onresult = (event) => {\n\t\t\t\tlet interimTranscript = '';\n\t\t\t\tfor (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n\t\t\t\t\tlet transcript = event.results[i][0].transcript;\n\t\t\t\t\tif (event.results[i].isFinal) {\n\t\t\t\t\t\tfinalTranscript += transcript;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinterimTranscript += transcript;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis.wordsSpoken = finalTranscript\n\t\t\t\tthis.output =  this.wordsSpoken += interimTranscript\n\t\t\t\tthis.wordCount = this.countWords(this.output)\n\t\t\t\tthis.totalWords = this.wordCount\n\t\t\t}\n\t\t\trecognition.start()\n\t\t\t\t\tif (this.stop == false) {\n\t\t\t\t\t\tconsole.log(\"app started\")\n\t\t\t\t\t\tthis.initialTime = Date.now();\n\t\t\t\t\t\tthis.grabTimeInterval = window.setInterval(this.grabTime, 1000)\n\t\t\t\t\t\tthis.registerWPMInterval = window.setInterval(this.registerWPM, 1000)\n\t\t\t\t\t\tthis.getEmotionStatsInterval = window.setInterval(this.getEmotionStats, 5000)\n\t\t\t\t\t} \n\t\t\t\t\tif (this.stop == true) {\n\t\t\t\t\t\trecognition.stop()\n\t\t\t\t\t\tthis.stop = false\n\t\t\t\t\t\tthis.continuous = true\n\t\t\t\t\t\tconsole.log(\"app stopped\")\n\t\n\t\t\t\t\t}\n\t\t},\n\t\n\t\tgrabTime: function () {\n\t\t//keep track of time in both milliseconds as well as minutes and seconds\n\t\t\tthis.timeDifference = Date.now() - this.initialTime;\n\t\t\tvar formatted = convertTime(this.timeDifference);\n\t\t\tdocument.getElementById('timer').innerHTML = '' + formatted;\n\t\t\tconsole.log(formatted)\n\t\t\tthis.timeElapsed = this.timeDifference\n\t\t\treturn this.timeElapsed\n\t\t\tfunction convertTime(miliseconds) {\n\t\t\t\tvar totalSeconds = Math.floor(miliseconds/1000);\n\t\t\t\tvar minutes = Math.floor(totalSeconds/60);\n\t\t\t\tvar seconds = totalSeconds - minutes * 60;\n\t\t\t\treturn minutes + ':' + seconds;\n\t\t\t}\n\t\t},\n\t\t\n\t\tcountWords: function (str){\n\t\t//count how many words are in the transcript of detected words\n\t\t\tconst arr = str.split(' ');\n\t\t\treturn arr.filter(word => word !== '').length;\n\t\t}, \n\t\t\n\t\tregisterWPM: function () {\n\t\t//calculate number of words per minute--at one second intervals\n\t\t\tthis.wpm = Math.round(this.wordCount/(this.timeElapsed/1000) * 60) \n\t\t},\n\t\t\n\t\tgetEmotionStats: function () {\n\t\t//send transcript data to be evaluated as per emotional content\n\t\t\tparalleldots.apiKey = \"hL7rOIhghKLZtrI6w04cFjxVvAOHQ7BiNhjMLAVnMPw\";\n\t\t\tparalleldots.emotion(this.wordsSpoken,\"en\")\n\t\t\t.then((response) => {\n\t\t\t\tlet obj = JSON.parse(response)\n\t\t\t\tthis.anger = Math.round(obj.emotion.Angry * 100) \n\t\t\t\tthis.fear = Math.round(obj.emotion.Fear * 100) \n\t\t\t\tthis.excitement = Math.round(obj.emotion.Excited * 100)\n\t\t\t\tthis.boredom = Math.round(obj.emotion.Bored * 100)\n\t\t\t\tthis.sadness = Math.round(obj.emotion.Sad * 100)\n\t\t\t\tthis.happiness = Math.round(obj.emotion.Happy * 100)\n\t\t\t\tconsole.log(\"emotion data retrieved\" + response)\n\t\t\t})\n\t\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t})\n\t\t\n\t\t},  \n\t\t\n\t\tstopVoiceControl: function () {\n\t\t//reset speech recognition so it can stop and clear original timers\n\t\t\tthis.continuous = false\n\t\t\tthis.stop = true\n\t\t\tthis.initiateVoiceControl()\n\t\t\tclearInterval(this.grabTimeInterval)\n\t\t\tclearInterval(this.registerWPMInterval)\n\t\t\tclearInterval(this.getEmotionStatsInterval)\n\t\t}, \n\t\n\t\treset: function () {\n\t\t\tlocation.reload()\n\t\t}\n\t\n\t\n\t\n\t\n\t}//\n}//\t\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}