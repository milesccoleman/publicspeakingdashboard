{"remainingRequest":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/aletheia/Desktop/publicspeakingdashboard/src/components/PublicSpeakingDashboard.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/src/components/PublicSpeakingDashboard.vue","mtime":1679257633000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/cache-loader/dist/cjs.js","mtime":1679257392000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/thread-loader/dist/cjs.js","mtime":1679257413000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/babel-loader/lib/index.js","mtime":1679257392000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/cache-loader/dist/cjs.js","mtime":1679257392000},{"path":"/Users/aletheia/Desktop/publicspeakingdashboard/node_modules/vue-loader/lib/index.js","mtime":1679257413000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAncHVibGljU3BlYWtpbmdEYXNoYm9hcmQnLAogIHByb3BzOiB7CiAgfSwgCiAgZGF0YSAoKSB7CgkJcmV0dXJuIHsKCQkJbXNnOiAnUHVibGljIFNwZWFraW5nIERhc2hib2FyZCcsIAoJCQl3b3Jkc1Nwb2tlbjogJycsIAoJCQlvdXRwdXQ6ICdSZWNvZ25pemVkIFRleHQnLAoJCQlncmFiVGltZUludGVydmFsOiAnJywgCgkJCXJlZ2lzdGVyV1BNSW50ZXJ2YWw6ICcnLCAKCQkJaW5pdGlhbFRpbWU6IDAsICAKCQkJdGltZTogMCwKCQkJdGltZUVsYXBzZWQ6IDAsIAoJCQl0aW1lRGlmZmVyZW5jZTogMCwgCgkJCXdvcmRDb3VudDogMCwKCQkJdG90YWxXb3JkczogMCwgCgkJCXdvcmRDb3VudERpdmlkZWRCeVRpbWU6IDAsCgkJCXN0b3A6IGZhbHNlLCAKCQkJd3BtOiAwLCAKCQkJY29udGludW91czogdHJ1ZQoJCX0KCX0sCgkKCWNyZWF0ZWQ6IGZ1bmN0aW9uICgpIHsKCQl3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24gPSB3aW5kb3cud2Via2l0U3BlZWNoUmVjb2duaXRpb24gfHwgd2luZG93LlNwZWVjaFJlY29nbml0aW9uOwoJCWxldCByZWNvZ25pdGlvbiA9IG5ldyB3aW5kb3cuU3BlZWNoUmVjb2duaXRpb24oKTsKCQlyZWNvZ25pdGlvbi5zdGFydCgpCgl9LCAKCgltZXRob2RzOiB7CgkKCQlpbml0aWF0ZVZvaWNlQ29udHJvbDogZnVuY3Rpb24gKCkgewoJCQljb25zb2xlLmxvZygndm9pY2UgcmVjb2duaXRpb24gaW5pdGlhdGVkJykKCQkJd2luZG93LlNwZWVjaFJlY29nbml0aW9uID0gd2luZG93LndlYmtpdFNwZWVjaFJlY29nbml0aW9uIHx8IHdpbmRvdy5TcGVlY2hSZWNvZ25pdGlvbjsKCQkJbGV0IGZpbmFsVHJhbnNjcmlwdCA9ICcnOwoJCQlsZXQgcmVjb2duaXRpb24gPSBuZXcgd2luZG93LlNwZWVjaFJlY29nbml0aW9uKCk7CgkJCXJlY29nbml0aW9uLmludGVyaW1SZXN1bHRzID0gdHJ1ZTsgCgkJCXJlY29nbml0aW9uLm1heEFsdGVybmF0aXZlcyA9IDEwOwoJCQlyZWNvZ25pdGlvbi5jb250aW51b3VzID0gdGhpcy5jb250aW51b3VzOwoJCQlyZWNvZ25pdGlvbi5vbnJlc3VsdCA9IChldmVudCkgPT4gewoJCQkJbGV0IGludGVyaW1UcmFuc2NyaXB0ID0gJyc7CgkJCQlmb3IgKGxldCBpID0gZXZlbnQucmVzdWx0SW5kZXgsIGxlbiA9IGV2ZW50LnJlc3VsdHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKCQkJCQlsZXQgdHJhbnNjcmlwdCA9IGV2ZW50LnJlc3VsdHNbaV1bMF0udHJhbnNjcmlwdDsKCQkJCQlpZiAoZXZlbnQucmVzdWx0c1tpXS5pc0ZpbmFsKSB7CgkJCQkJCWZpbmFsVHJhbnNjcmlwdCArPSB0cmFuc2NyaXB0OwoJCQkJCX0gZWxzZSB7CgkJCQkJCWludGVyaW1UcmFuc2NyaXB0ICs9IHRyYW5zY3JpcHQ7CgkJCQkJfQoJCQkJfQoJCQkJY29uc29sZS5sb2coInRyYW5zY3JpcHQ6ICIgKyBpbnRlcmltVHJhbnNjcmlwdCkKCQkJCXRoaXMud29yZHNTcG9rZW4gPSBmaW5hbFRyYW5zY3JpcHQKCQkJCXRoaXMub3V0cHV0ID0gIHRoaXMud29yZHNTcG9rZW4gKz0gaW50ZXJpbVRyYW5zY3JpcHQKCQkJCXRoaXMud29yZENvdW50ID0gdGhpcy5jb3VudFdvcmRzKHRoaXMub3V0cHV0KQoJCQkJdGhpcy50b3RhbFdvcmRzID0gdGhpcy53b3JkQ291bnQKCQkJfQoJCQlyZWNvZ25pdGlvbi5zdGFydCgpCgkJCQkJaWYgKHRoaXMuc3RvcCA9PSBmYWxzZSkgewoJCQkJCQl0aGlzLmluaXRpYWxUaW1lID0gRGF0ZS5ub3coKTsKCQkJCQkJdGhpcy5ncmFiVGltZUludGVydmFsID0gd2luZG93LnNldEludGVydmFsKHRoaXMuZ3JhYlRpbWUsIDEwMDApCgkJCQkJCXRoaXMucmVnaXN0ZXJXUE1JbnRlcnZhbCA9IHdpbmRvdy5zZXRJbnRlcnZhbCh0aGlzLnJlZ2lzdGVyV1BNLCAxMDAwKQoJCQkJCX0gCgkJCQkJaWYgKHRoaXMuc3RvcCA9PSB0cnVlKSB7CgkJCQkJCXJlY29nbml0aW9uLnN0b3AoKQoJCQkJCQl0aGlzLnN0b3AgPSBmYWxzZQoJCQkJCQljb25zb2xlLmxvZygic3RvcHBlZD8iKQoJCQkJCQl0aGlzLmNvbnRpbnVvdXMgPSB0cnVlCgkKCQkJCQl9CgkJfSwKCQoJCWdyYWJUaW1lOiBmdW5jdGlvbiAoKSB7CgkJCXRoaXMudGltZURpZmZlcmVuY2UgPSBEYXRlLm5vdygpIC0gdGhpcy5pbml0aWFsVGltZTsKCQkJdmFyIGZvcm1hdHRlZCA9IGNvbnZlcnRUaW1lKHRoaXMudGltZURpZmZlcmVuY2UpOwoJCQlkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgndGltZXInKS5pbm5lckhUTUwgPSAnJyArIGZvcm1hdHRlZDsKCQkJdGhpcy50aW1lRWxhcHNlZCA9IHRoaXMudGltZURpZmZlcmVuY2UKCQkJY29uc29sZS5sb2coIm9nIHRpbWUgZWxhcHNlZCAiICsgdGhpcy50aW1lRWxhcHNlZCkKCQkJcmV0dXJuIHRoaXMudGltZUVsYXBzZWQKCQkJZnVuY3Rpb24gY29udmVydFRpbWUobWlsaXNlY29uZHMpIHsKCQkJCXZhciB0b3RhbFNlY29uZHMgPSBNYXRoLmZsb29yKG1pbGlzZWNvbmRzLzEwMDApOwoJCQkJdmFyIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRvdGFsU2Vjb25kcy82MCk7CgkJCQl2YXIgc2Vjb25kcyA9IHRvdGFsU2Vjb25kcyAtIG1pbnV0ZXMgKiA2MDsKCQkJCXJldHVybiBtaW51dGVzICsgJzonICsgc2Vjb25kczsKCQkJfQoJCX0sCgkJCgkJCgkJCgkJY291bnRXb3JkczogZnVuY3Rpb24gKHN0cil7CgkJCWNvbnN0IGFyciA9IHN0ci5zcGxpdCgnICcpOwoJCQlyZXR1cm4gYXJyLmZpbHRlcih3b3JkID0+IHdvcmQgIT09ICcnKS5sZW5ndGg7CgkJfSwgCgkJCgkJcmVnaXN0ZXJXUE06IGZ1bmN0aW9uICgpIHsKCQkJdGhpcy53cG0gPSBNYXRoLnJvdW5kKHRoaXMud29yZENvdW50Lyh0aGlzLnRpbWVFbGFwc2VkLzEwMDApICogNjApIAoJCQljb25zb2xlLmxvZygidGltZSBlbGFwc2VkICIgKyB0aGlzLnRpbWVFbGFwc2VkKQkKCQkJY29uc29sZS5sb2coIndvcmQgY291bnQgIiArIHRoaXMud29yZENvdW50KQoJCX0sIAoJCQoJCXN0b3BWb2ljZUNvbnRyb2w6IGZ1bmN0aW9uICgpIHsKCQkJdGhpcy5jb250aW51b3VzID0gZmFsc2UKCQkJdGhpcy5zdG9wID0gdHJ1ZQoJCQl0aGlzLmluaXRpYXRlVm9pY2VDb250cm9sKCkKCQkJY2xlYXJJbnRlcnZhbCh0aGlzLmdyYWJUaW1lSW50ZXJ2YWwpCgkJCWNsZWFySW50ZXJ2YWwodGhpcy5yZWdpc3RlcldQTUludGVydmFsKQoJCX0sIAoJCgkJcmVzZXQ6IGZ1bmN0aW9uICgpIHsKCQkJbG9jYXRpb24ucmVsb2FkKCkKCQl9CgkKCQoJCgkKCX0vLwp9Ly8JCg=="},{"version":3,"sources":["PublicSpeakingDashboard.vue"],"names":[],"mappings":";AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;;;AAKA;AACA","file":"PublicSpeakingDashboard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"dashboard\">\n    <h1>{{ msg }}</h1>\n    <p id=\"timer\">\n\t\t{{ time }} <br>\n\t\tTime\n    </p>\n    <p id=\"totalWords\">\n\t\t{{ totalWords }} <br>\n\t\tTotal Words Detected\n    </p>\n     <p id=\"wpm\">\n\t\t{{ wpm }} <br>\n\t\tOverall Average Words Per Minute\n    </p>\n    <span><button v-on:click=\"initiateVoiceControl\">Start</button><button v-on:click=\"stopVoiceControl\">Stop</button><button v-on:click=\"reset\">Reset</button></span>\n    \n    <p id=\"output\">\n      {{ output }}\n    </p>\n\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'publicSpeakingDashboard',\n  props: {\n  }, \n  data () {\n\t\treturn {\n\t\t\tmsg: 'Public Speaking Dashboard', \n\t\t\twordsSpoken: '', \n\t\t\toutput: 'Recognized Text',\n\t\t\tgrabTimeInterval: '', \n\t\t\tregisterWPMInterval: '', \n\t\t\tinitialTime: 0,  \n\t\t\ttime: 0,\n\t\t\ttimeElapsed: 0, \n\t\t\ttimeDifference: 0, \n\t\t\twordCount: 0,\n\t\t\ttotalWords: 0, \n\t\t\twordCountDividedByTime: 0,\n\t\t\tstop: false, \n\t\t\twpm: 0, \n\t\t\tcontinuous: true\n\t\t}\n\t},\n\t\n\tcreated: function () {\n\t\twindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\t\tlet recognition = new window.SpeechRecognition();\n\t\trecognition.start()\n\t}, \n\n\tmethods: {\n\t\n\t\tinitiateVoiceControl: function () {\n\t\t\tconsole.log('voice recognition initiated')\n\t\t\twindow.SpeechRecognition = window.webkitSpeechRecognition || window.SpeechRecognition;\n\t\t\tlet finalTranscript = '';\n\t\t\tlet recognition = new window.SpeechRecognition();\n\t\t\trecognition.interimResults = true; \n\t\t\trecognition.maxAlternatives = 10;\n\t\t\trecognition.continuous = this.continuous;\n\t\t\trecognition.onresult = (event) => {\n\t\t\t\tlet interimTranscript = '';\n\t\t\t\tfor (let i = event.resultIndex, len = event.results.length; i < len; i++) {\n\t\t\t\t\tlet transcript = event.results[i][0].transcript;\n\t\t\t\t\tif (event.results[i].isFinal) {\n\t\t\t\t\t\tfinalTranscript += transcript;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinterimTranscript += transcript;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconsole.log(\"transcript: \" + interimTranscript)\n\t\t\t\tthis.wordsSpoken = finalTranscript\n\t\t\t\tthis.output =  this.wordsSpoken += interimTranscript\n\t\t\t\tthis.wordCount = this.countWords(this.output)\n\t\t\t\tthis.totalWords = this.wordCount\n\t\t\t}\n\t\t\trecognition.start()\n\t\t\t\t\tif (this.stop == false) {\n\t\t\t\t\t\tthis.initialTime = Date.now();\n\t\t\t\t\t\tthis.grabTimeInterval = window.setInterval(this.grabTime, 1000)\n\t\t\t\t\t\tthis.registerWPMInterval = window.setInterval(this.registerWPM, 1000)\n\t\t\t\t\t} \n\t\t\t\t\tif (this.stop == true) {\n\t\t\t\t\t\trecognition.stop()\n\t\t\t\t\t\tthis.stop = false\n\t\t\t\t\t\tconsole.log(\"stopped?\")\n\t\t\t\t\t\tthis.continuous = true\n\t\n\t\t\t\t\t}\n\t\t},\n\t\n\t\tgrabTime: function () {\n\t\t\tthis.timeDifference = Date.now() - this.initialTime;\n\t\t\tvar formatted = convertTime(this.timeDifference);\n\t\t\tdocument.getElementById('timer').innerHTML = '' + formatted;\n\t\t\tthis.timeElapsed = this.timeDifference\n\t\t\tconsole.log(\"og time elapsed \" + this.timeElapsed)\n\t\t\treturn this.timeElapsed\n\t\t\tfunction convertTime(miliseconds) {\n\t\t\t\tvar totalSeconds = Math.floor(miliseconds/1000);\n\t\t\t\tvar minutes = Math.floor(totalSeconds/60);\n\t\t\t\tvar seconds = totalSeconds - minutes * 60;\n\t\t\t\treturn minutes + ':' + seconds;\n\t\t\t}\n\t\t},\n\t\t\n\t\t\n\t\t\n\t\tcountWords: function (str){\n\t\t\tconst arr = str.split(' ');\n\t\t\treturn arr.filter(word => word !== '').length;\n\t\t}, \n\t\t\n\t\tregisterWPM: function () {\n\t\t\tthis.wpm = Math.round(this.wordCount/(this.timeElapsed/1000) * 60) \n\t\t\tconsole.log(\"time elapsed \" + this.timeElapsed)\t\n\t\t\tconsole.log(\"word count \" + this.wordCount)\n\t\t}, \n\t\t\n\t\tstopVoiceControl: function () {\n\t\t\tthis.continuous = false\n\t\t\tthis.stop = true\n\t\t\tthis.initiateVoiceControl()\n\t\t\tclearInterval(this.grabTimeInterval)\n\t\t\tclearInterval(this.registerWPMInterval)\n\t\t}, \n\t\n\t\treset: function () {\n\t\t\tlocation.reload()\n\t\t}\n\t\n\t\n\t\n\t\n\t}//\n}//\t\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n"]}]}